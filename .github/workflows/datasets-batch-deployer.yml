name: GCP Batch Processing Deployer
on:
  workflow_call:
    inputs:
      STATE_BUCKET_NAME:
        description: Bucket name for the terraform state
        required: true
        type: string
      OBJECT_PREFIX:
        description: Object prefix for the terraform state
        required: true
        type: string
      PROJECT_ID:
        description: GCP Project ID
        required: true
        type: string
      REGION:
        description: GCP region
        required: true
        type: string
      DEPLOYER_SERVICE_ACCOUNT:
        description: Deployer service account
        required: true
        type: string
      JOB_SCHEDULE:
        description: Schedule for the GCP scheduler
        required: true
        type: string
      DATASETS_BUCKET_NAME:
        description: Bucket name containing the historical datasets
        required: true
        type: string
      ENVIRONMENT:
        description: Environment name
        required: true
        type: string
    secrets:
      GCP_MOBILITY_FEEDS_SA_KEY:
        description: Service account key
        required: true

jobs:
  terraform:
    name: 'Terraform'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: gcloud_auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_MOBILITY_FEEDS_SA_KEY }}

      - name: Google Cloud Setup
        uses: google-github-actions/setup-gcloud@v1

      - name: Set Variables
        run: |
          echo "Setting variables"
          echo "BUCKET_NAME=${{ inputs.STATE_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "OBJECT_PREFIX=${{ inputs.OBJECT_PREFIX }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ inputs.PROJECT_ID }}" >> $GITHUB_ENV
          echo "REGION=${{ inputs.REGION }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ inputs.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "DEPLOYER_SERVICE_ACCOUNT=${{ inputs.DEPLOYER_SERVICE_ACCOUNT }}" >> $GITHUB_ENV
          echo "JOB_SCHEDULE=${{ inputs.JOB_SCHEDULE }}" >> $GITHUB_ENV
          echo "DATASETS_BUCKET_NAME=${{ inputs.DATASETS_BUCKET_NAME }}" >> $GITHUB_ENV

      - name: Populate Variables
        run: |
          scripts/replace-variables.sh -in_file infra/backend.conf.rename_me -out_file infra/batch/backend.conf -variables BUCKET_NAME,OBJECT_PREFIX
          scripts/replace-variables.sh -in_file infra/batch/vars.tfvars.rename_me -out_file infra/batch/vars.tfvars -variables REGION,PROJECT_ID,DEPLOYER_SERVICE_ACCOUNT,JOB_SCHEDULE,ENVIRONMENT,DATASETS_BUCKET_NAME
          cat infra/batch/vars.tfvars

      - name: Docker Compose DB/Liquibase for db-gen.sh
        run: docker-compose --env-file ./config/.env.local up -d liquibase
        working-directory: ${{ github.workspace }}
  
      - name: Generate DB code
        run: |
          scripts/db-gen.sh

      - name: Build python functions
        run: |
          scripts/function-python-build.sh --all

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.3
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd infra/batch
          terraform init -backend-config=backend.conf

      - name: Terraform Plan
        run: |
          cd infra/batch
          terraform plan -var-file=vars.tfvars -out=tf.plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Apply
        run: |
          cd infra/batch
          terraform apply -auto-approve tf.plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Database Deployment

on:
  workflow_call:
    secrets:
      GCP_MOBILITY_FEEDS_SA_KEY:
        description: Service account key
        required: true
    inputs:
      ENVIRONMENT:
        description: Database environment. Possible values prod, staging and dev
        required: true
        type: string
      BUCKET_NAME:
        description: Bucket name where terraform state is persisted
        required: true
        type: string
      OBJECT_PREFIX:
        description: Storage object prefix where terraform state is persisted
        required: true
        type: string
      PROJECT_ID:
        description: GCP project ID
        required: true
        type: string
      REGION:
        description: GCP region
        required: true
        type: string
      DEPLOYER_SERVICE_ACCOUNT:
        description: Service account used to deploy resources
        required: true
        type: string
      POSTGRE_SQL_INSTANCE_NAME:
        description: PostgreSQL Instance Name
        required: true
        type: string
      POSTGRE_SQL_DB_NAME:
        description: PostgreSQL Database Name
        required: true
        type: string
      POSTGRE_USER_NAME:
        description: PostgreSQL User Name
        required: true
        type: string
      POSTGRE_USER_PASSWORD:
        description: PostgreSQL User Password
        required: true
        type: string
      TF_APPLY:
        description: Terraform apply changes
        required: true
        type: boolean

jobs:
  terraform:
    name: 'Terraform'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: gcloud_auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_MOBILITY_FEEDS_SA_KEY }}

      - name: Google Cloud Setup
        uses: google-github-actions/setup-gcloud@v1

      - name: Set Variables
        run: |
          echo "Setting variables"
          echo "ENVIRONMENT=${{ inputs.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "BUCKET_NAME=${{ inputs.BUCKET_NAME }}" >> $GITHUB_ENV
          echo "OBJECT_PREFIX=${{ inputs.OBJECT_PREFIX }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ inputs.PROJECT_ID }}" >> $GITHUB_ENV
          echo "REGION=${{ inputs.REGION }}" >> $GITHUB_ENV
          echo "DEPLOYER_SERVICE_ACCOUNT=${{ inputs.DEPLOYER_SERVICE_ACCOUNT }}" >> $GITHUB_ENV
          echo "POSTGRE_SQL_INSTANCE_NAME=${{ inputs.POSTGRE_SQL_INSTANCE_NAME }}" >> $GITHUB_ENV
          echo "POSTGRE_SQL_DB_NAME=${{ inputs.POSTGRE_SQL_DB_NAME }}" >> $GITHUB_ENV
          echo "POSTGRE_USER_NAME=${{ inputs.POSTGRE_USER_NAME }}" >> $GITHUB_ENV
          echo "POSTGRE_USER_PASSWORD=${{ inputs.POSTGRE_USER_PASSWORD }}" >> $GITHUB_ENV

      - name: Populate Variables
        run: |
          scripts/replace-variables.sh -in_file infra/backend.conf.rename_me -out_file infra/postgresql/backend.conf -variables BUCKET_NAME,OBJECT_PREFIX
          cp infra/postgresql/backend.conf infra/terraform-init/backend.conf
          scripts/replace-variables.sh -in_file infra/postgresql/vars.tfvars.rename_me -out_file infra/postgresql/vars.tfvars -variables ENVIRONMENT,PROJECT_ID,REGION,DEPLOYER_SERVICE_ACCOUNT,POSTGRE_SQL_INSTANCE_NAME,POSTGRE_SQL_DB_NAME,POSTGRE_USER_NAME,POSTGRE_USER_PASSWORD

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.3
          terraform_wrapper: false

      - name: Terraform Init Test
        run: |
          cd infra/terraform-init
          terraform init -backend-config=backend.conf

      - name: Terraform Init
        run: |
          cd infra/postgresql
          terraform init -backend-config=backend.conf
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Terraform Plan
        run: |
          cd infra/postgresql
          terraform plan -var-file=vars.tfvars -out=tf.plan
          terraform show -no-color tf.plan > terraform-plan.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}

      - name: Terraform Apply
        if: ${{ inputs.TF_APPLY }}
        run: |
          cd infra/postgresql
          terraform apply -auto-approve tf.plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}


# Update the Mobility Database Schema
name: Database Update - PROD
on:
  workflow_dispatch:
  workflow_call:
  repository_dispatch: # Update on mobility-database-catalog repo dispatch
    types: [ catalog-sources-updated, gbfs-systems-updated ]
jobs:
  update:
    uses: ./.github/workflows/db-update.yml
    with:
      PROJECT_ID: ${{ vars.PROD_MOBILITY_FEEDS_PROJECT_ID }}
      REGION: ${{ vars.MOBILITY_FEEDS_REGION }}
      DB_NAME: ${{ vars.PROD_POSTGRE_SQL_DB_NAME }}
      ENVIRONMENT: ${{ vars.PROD_MOBILITY_FEEDS_ENVIRONMENT }}
      DB_ENVIRONMENT: ${{ vars.PROD_MOBILITY_FEEDS_ENVIRONMENT }}
    secrets:
      DB_USER_PASSWORD: ${{ secrets.PROD_POSTGRE_USER_PASSWORD }}
      DB_USER_NAME: ${{ secrets.PROD_POSTGRE_USER_NAME }}
      DB_INSTANCE_NAME: ${{ secrets.DB_INSTANCE_NAME }}
      GCP_MOBILITY_FEEDS_SA_KEY: ${{ secrets.PROD_GCP_MOBILITY_FEEDS_SA_KEY }}
      DB_GCP_MOBILITY_FEEDS_SA_KEY: ${{ secrets.PROD_GCP_MOBILITY_FEEDS_SA_KEY }}
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      OP_FEEDS_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_FEEDS_SERVICE_ACCOUNT_TOKEN }}
      POSTGRE_SQL_INSTANCE_NAME: ${{ secrets.DB_INSTANCE_NAME }}

  notify-slack-on-failure:
    needs: [ update ]
    if: always() && (needs.update.result == 'failure') && (github.event_name == 'repository_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Notify Slack
        uses: ./.github/actions/notify-slack
        with:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          PRIORITY: "high"

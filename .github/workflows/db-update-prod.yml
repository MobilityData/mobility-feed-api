# Update the Mobility Database Schema
name: Database Update - PROD
on:
  workflow_dispatch:  # Manual trigger
    inputs:
      DRY_RUN:
        description: Skip applying schema and content updates
        required: false
        default: false
        type: boolean
      INSTALL_CURRENT:
        description: Install the currently deployed API version when true; when false install main (latest).
        required: false
        default: true
        type: boolean
  workflow_call: []
  repository_dispatch: # Update on mobility-database-catalog repo dispatch
    types: [ catalog-sources-updated, gbfs-systems-updated ]
jobs:
  update:
    uses: ./.github/workflows/db-update.yml
    with:
      PROJECT_ID: ${{ vars.PROD_MOBILITY_FEEDS_PROJECT_ID }}
      REGION: ${{ vars.MOBILITY_FEEDS_REGION }}
      DB_NAME: ${{ vars.PROD_POSTGRE_SQL_DB_NAME }}
      ENVIRONMENT: ${{ vars.PROD_MOBILITY_FEEDS_ENVIRONMENT }}
      DB_ENVIRONMENT: ${{ vars.PROD_MOBILITY_FEEDS_ENVIRONMENT }}
      API_BASE_URL: api.mobilitydatabase.org
      DRY_RUN: ${{ github.event_name == 'repository_dispatch' && (github.event.client_payload.DRY_RUN || 'false') || inputs.DRY_RUN || 'false' }}
      # Algorithm for INSTALL_CURRENT (forwarded to db-update.yml):
      # - If the trigger is repository_dispatch, force 'true' because we want to re-install the same repo-dispatch runs must
      #   install the currently deployed API version (fail if unknown).
      # - If the trigger is from another workflow (workflow_call), currently from release.yml, force 'false'
      #   because it's a release, we want the latest not the current.
      # - Otherwise (manual workflow_dispatch) use the wrapper's inputs.INSTALL_CURRENT.
      INSTALL_CURRENT: ${{ github.event_name == 'repository_dispatch' && 'true' || github.event_name == 'workflow_call' && 'false' || inputs.INSTALL_CURRENT || 'false' }}
    secrets:
      DB_USER_PASSWORD: ${{ secrets.PROD_POSTGRE_USER_PASSWORD }}
      DB_USER_NAME: ${{ secrets.PROD_POSTGRE_USER_NAME }}
      DB_INSTANCE_NAME: ${{ secrets.DB_INSTANCE_NAME }}
      GCP_MOBILITY_FEEDS_SA_KEY: ${{ secrets.PROD_GCP_MOBILITY_FEEDS_SA_KEY }}
      DB_GCP_MOBILITY_FEEDS_SA_KEY: ${{ secrets.PROD_GCP_MOBILITY_FEEDS_SA_KEY }}
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      OP_FEEDS_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_FEEDS_SERVICE_ACCOUNT_TOKEN }}
      POSTGRE_SQL_INSTANCE_NAME: ${{ secrets.DB_INSTANCE_NAME }}
      API_TEST_REFRESH_TOKEN: ${{ secrets.PROD_API_TEST_REFRESH_TOKEN }}

  notify-slack-on-failure:
    needs: [ update ]
    if: always() && (needs.update.result == 'failure') && (github.event_name == 'repository_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Notify Slack
        uses: ./.github/actions/notify-slack
        with:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          PRIORITY: "high"

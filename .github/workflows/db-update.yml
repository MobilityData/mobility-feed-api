# Update the Mobility Database Schema
name: Database Update
on:
  workflow_call:
    secrets:
      GCP_MOBILITY_FEEDS_SA_KEY:
        description: Service account key
        required: true
      DB_USER_NAME:
        description: PostgreSQL User Name
        required: true
      DB_USER_PASSWORD:
        description: PostgreSQL User Password
        required: true
      DB_INSTANCE_NAME:
        description: PostgreSQL Database Instance Name
        required: true
    inputs:
      PROJECT_ID:
        description: GCP Project ID
        required: true
        type: string
      DB_NAME:
        description: PostgreSQL Database Name
        required: true
        type: string
      RUN_POPULATE_SCRIPT:
        description: Option to run the script that populates the database
        required: false
        default: true # TODO change before merge
        type: boolean
      REGION:
        description: GCP region
        required: true
        type: string
jobs:
  liquibase:
    name: 'Liquibase Update'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      id: gcloud_auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_MOBILITY_FEEDS_SA_KEY }}

    - name: Google Cloud Setup
      uses: google-github-actions/setup-gcloud@v1

    - name: Get Database Instance IP
      run: |
        gcloud config set project ${{ inputs.PROJECT_ID }}
        DB_IP=$(gcloud sql instances describe ${{ secrets.DB_INSTANCE_NAME }} --format=json | jq -r '.ipAddresses[] | select(.type=="PRIMARY") | .ipAddress')
        echo "DB_IP=$DB_IP" >> $GITHUB_ENV

    - name: Liquibase Update
      uses: liquibase-github-actions/update@v4.23.0
      with:
        classpath: 'liquibase'
        changeLogFile: 'changelog.xml'
        username: ${{ secrets.DB_USER_NAME }}
        password: ${{ secrets.DB_USER_PASSWORD }}
        url: 'jdbc:postgresql://${{ env.DB_IP }}:5432/${{ inputs.DB_NAME }}'

    - name: Clear content of the database
      if: inputs.RUN_POPULATE_SCRIPT
      uses: liquibase-github-actions/update@v4.23.0
      with:
        classpath: 'liquibase'
        changeLogFile: 'clear_tables.xml'
        username: ${{ secrets.DB_USER_NAME }}
        password: ${{ secrets.DB_USER_PASSWORD }}
        url: 'jdbc:postgresql://${{ env.DB_IP }}:5432/${{ inputs.DB_NAME }}'

    - name: Setup python
      if: inputs.RUN_POPULATE_SCRIPT
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Update .env file
      run: |
        echo "POSTGRES_USER=${{ secrets.DB_USER_NAME }}" > config/.env.local
        echo "PGUSER=${{ secrets.DB_USER_NAME }}" >> config/.env.local
        echo "POSTGRES_PASSWORD=${{ secrets.DB_USER_PASSWORD }}" >> config/.env.local
        echo "POSTGRES_DB=${{ inputs.DB_NAME }}" >> config/.env.local
        echo "POSTGRES_PORT=5432" >> config/.env.local
        echo "POSTGRES_HOST=${{ env.DB_IP }}" >> config/.env.local
        echo "ENV=dev" >> config/.env.local
        echo "INSTANCE_NAME=${{ inputs.PROJECT_ID }}:${{ inputs.REGION }}:${{ secrets.DB_INSTANCE_NAME }}" >> config/.env.local
        cat config/.env.local

    - name: Install requirements and generate db model
      if: inputs.RUN_POPULATE_SCRIPT
      run: scripts/db-gen.sh

    - name: Download csv version of the database
      if: inputs.RUN_POPULATE_SCRIPT
      run: wget -O sources.csv https://bit.ly/catalogs-csv

    - name: Validate file download
      run: ls -la

    - name: Get full path of sources.csv
      id: getpath
      run: echo "::set-output name=PATH::$(realpath sources.csv)"

    - name: Populate Database
      if: inputs.RUN_POPULATE_SCRIPT
      run: scripts/populate-db.sh ${{ steps.getpath.outputs.PATH }}


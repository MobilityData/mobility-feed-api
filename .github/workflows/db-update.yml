# Update the Mobility Database Schema
name: Database Update
on:
  workflow_call:
    secrets:
      GCP_MOBILITY_FEEDS_SA_KEY:
        description: Service account key
        required: true
      DB_USER_NAME:
        description: PostgreSQL User Name
        required: true
      DB_USER_PASSWORD:
        description: PostgreSQL User Password
        required: true
      DB_INSTANCE_NAME:
        description: PostgreSQL Database Instance Name
        required: true
      OP_SERVICE_ACCOUNT_TOKEN:
        description: OnePassword Service Account Token
        required: true
      DEV_GCP_MOBILITY_FEEDS_SA_KEY:
        description: Service account key for dev
        required: false
    inputs:
      PROJECT_ID:
        description: GCP Project ID
        required: true
        type: string
      DB_NAME:
        description: PostgreSQL Database Name
        required: true
        type: string
      REGION:
        description: GCP region
        required: true
        type: string
      ENVIRONMENT:
        description: GCP ENVIRONMENT
        required: true
        type: string
jobs:
  db-update:
    name: 'Database Update'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      id: gcloud_auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_MOBILITY_FEEDS_SA_KEY }}

    - name: Google Cloud Setup
      uses: google-github-actions/setup-gcloud@v1

    - name: Get Database Instance IP
      run: |
        gcloud config set project ${{ inputs.PROJECT_ID }}
        DB_IP=$(gcloud sql instances describe ${{ secrets.DB_INSTANCE_NAME }} --format=json | jq -r '.ipAddresses[] | select(.type=="PRIMARY") | .ipAddress')
        echo "DB_IP=$DB_IP" >> $GITHUB_ENV

    - name: Liquibase Update
      uses: liquibase-github-actions/update@v4.23.0
      with:
        classpath: 'liquibase'
        changeLogFile: 'changelog.xml'
        username: ${{ secrets.DB_USER_NAME }}
        password: ${{ secrets.DB_USER_PASSWORD }}
        url: 'jdbc:postgresql://${{ env.DB_IP }}:5432/${{ inputs.DB_NAME }}'

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Update .env file
      run: |
        echo "PGUSER=${{ secrets.DB_USER_NAME }}" >> config/.env.local
        echo "POSTGRES_PASSWORD=${{ secrets.DB_USER_PASSWORD }}" >> config/.env.local
        echo "POSTGRES_DB=${{ inputs.DB_NAME }}" >> config/.env.local
        echo "POSTGRES_PORT=5432" >> config/.env.local
        echo "POSTGRES_HOST=${{ env.DB_IP }}" >> config/.env.local
        echo "FEEDS_DATABASE_URL=postgresql://${{ secrets.DB_USER_NAME }}:${{ secrets.DB_USER_PASSWORD }}@${{ env.DB_IP }}:5432/${{ inputs.DB_NAME }}" >> config/.env.local
        echo "ENV=dev" >> config/.env.local
        cat config/.env.local

    - name: Install requirements and generate db model
      run: scripts/db-gen.sh

    - name: Download csv version of the database
      run: wget -O sources.csv https://bit.ly/catalogs-csv

    - name: Get full path of sources.csv
      id: getpath
      run: echo "PATH=$(realpath sources.csv)" >> $GITHUB_OUTPUT

    - name: Update Database Content
      run: scripts/populate-db.sh ${{ steps.getpath.outputs.PATH }} > populate.log

    - name: Upload log file for verification
      uses: actions/upload-artifact@v3
      with:
        name: populate.log
        path: populate.log

  update-secret-in-dev:
    name: Update GH Secrets
    needs: db-update
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud DEV
        if: ${{ inputs.ENVIRONMENT == 'dev' }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_MOBILITY_FEEDS_SA_KEY }}

      - name: Authenticate to Google Cloud QA/PROD
        if: ${{ inputs.ENVIRONMENT != 'dev' }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_MOBILITY_FEEDS_SA_KEY }}

      - name: Google Cloud Setup
        uses: google-github-actions/setup-gcloud@v1

      - name: Load secrets from 1Password
        id: onepw_secrets
        uses: 1password/load-secrets-action@v1.3.1
        with:
          export-env: true # Export loaded secrets as environment variables
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          CREDENTIALS: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/2mtq7eqbhxv3o25yerdbz4scse/credential"

      - name: Create or Update Auth Secret
        env:
          PROJECT_ID: ${{ inputs.PROJECT_ID }}
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
          SECRET_VALUE: ${{ env.CREDENTIALS }}
        run: |
          UPPER_ENVIRONMENT=$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')
          SECRET_NAME="${UPPER_ENVIRONMENT}_FEEDS_CREDENTIALS"
          
          # Set PROJECT_ID to 'mobility-feeds-dev' if ENVIRONMENT is 'dev'
          if [ "$ENVIRONMENT" = "dev" ]; then
            PROJECT_ID="mobility-feeds-dev"
          fi
          echo "Processing secret $SECRET_NAME in project $PROJECT_ID..."

          if gcloud secrets describe $SECRET_NAME --project=$PROJECT_ID; then
            echo "Secret $SECRET_NAME already exists in project $PROJECT_ID, updating..."
            echo -n "$SECRET_VALUE" | gcloud secrets versions add $SECRET_NAME --data-file=- --project=$PROJECT_ID
          else
            echo "Secret $SECRET_NAME does not exist in project $PROJECT_ID, creating..."
            echo -n "$SECRET_VALUE" | gcloud secrets create $SECRET_NAME --data-file=- --replication-policy="automatic" --project=$PROJECT_ID
          fi
    
      


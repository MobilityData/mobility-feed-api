name: GCP Scheduler Deployment

on:
  push:
    branches:
      - '**'

jobs:
  terraform:
    name: 'Terraform'
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: gcloud_auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_MOBILITY_FEEDS_SA_KEY }}

      - name: Google Cloud Setup
        uses: google-github-actions/setup-gcloud@v1

      - name: Set Variables
        run: |
          echo "Setting variables"
          echo "FUNCTION_BUCKET_NAME=mobility-batch-processing" >> $GITHUB_ENV
          echo "BUCKET_NAME=mobility-feeds-terraform-dev" >> $GITHUB_ENV
          echo "OBJECT_PREFIX=mobility-batch-processing-tf-state" >> $GITHUB_ENV
          echo "PROJECT_ID=mobility-feeds-dev" >> $GITHUB_ENV
          echo "REGION=us-central1" >> $GITHUB_ENV
          echo "DEPLOYER_SERVICE_ACCOUNT=ci-impersonator@mobility-feeds-dev.iam.gserviceaccount.com" >> $GITHUB_ENV
          echo "SOURCE_ZIP_PATH=datasets/" >> $GITHUB_ENV
          echo "SOURCE_CODE_ZIP_FILE=datasets.zip" >> $GITHUB_ENV
          echo "HTTP_FUNCTION_NAME=dataset-batch" >> $GITHUB_ENV
          echo "PUBSUB_FUNCTION_NAME=single-dataset-function" >> $GITHUB_ENV
          echo "RUNTIME=python310" >> $GITHUB_ENV
          echo "HTTP_ENTRY_POINT=batch_dataset" >> $GITHUB_ENV
          echo "PUBSUB_ENTRY_POINT=process_dataset" >> $GITHUB_ENV
          echo "AVAILABLE_MEMORY=512Mi" >> $GITHUB_ENV
          echo "PUBSUB_TIMEOUT_SECONDS=540" >> $GITHUB_ENV
          echo "HTTP_TIMEOUT_SECONDS=3600" >> $GITHUB_ENV
          echo "MAX_INSTANCE_COUNT=10" >> $GITHUB_ENV
          echo "JOB_NAME=dataset-batch-job" >> $GITHUB_ENV
          echo "JOB_DESCRIPTION=Run python function daily" >> $GITHUB_ENV
          echo "JOB_SCHEDULE=*/1 * * * *" >> $GITHUB_ENV
          echo "JOB_HTTP_METHOD=GET" >> $GITHUB_ENV
          echo "JOB_ATTEMPT_DEADLINE=320s" >> $GITHUB_ENV
          echo "PUBSUB_TOPIC_NAME=datasets-batch-topic" >> $GITHUB_ENV
          echo "CREATE_PUBSUB_FUNCTION=true" >> $GITHUB_ENV

      - name: Populate Variables
        run: |
          scripts/replace-variables.sh -in_file infra/backend.conf.rename_me -out_file infra/batch/backend.conf -variables BUCKET_NAME,OBJECT_PREFIX
          scripts/replace-variables.sh -in_file infra/batch/vars.tfvars.rename_me -out_file infra/batch/pre-vars.tfvars -variables FUNCTION_BUCKET_NAME,REGION,PROJECT_ID,DEPLOYER_SERVICE_ACCOUNT,SOURCE_ZIP_PATH,SOURCE_CODE_ZIP_FILE,HTTP_FUNCTION_NAME,PUBSUB_FUNCTION_NAME, RUNTIME,HTTP_ENTRY_POINT,PUBSUB_ENTRY_POINT,AVAILABLE_MEMORY,HTTP_TIMEOUT_SECONDS,PUBSUB_TIMEOUT_SECONDS,MAX_INSTANCE_COUNT,JOB_NAME,JOB_DESCRIPTION,JOB_SCHEDULE,JOB_ATTEMPT_DEADLINE,JOB_HTTP_METHOD,PUBSUB_TOPIC_NAME,CREATE_PUBSUB_FUNCTION  
          scripts/replace-variables.sh -in_file infra/batch/pre-vars.tfvars -out_file infra/batch/vars.tfvars -variables FUNCTION_ENV_VARIABLE -no_quotes
        env:
          FUNCTION_ENV_VARIABLE: '"BUCKET_NAME"="mobility-datasets", "POSTGRES_USER"="${{ secrets.DEV_POSTGRE_USER_NAME }}", "POSTGRES_PASSWORD"="${{ secrets.DEV_POSTGRE_USER_PASSWORD }}", "POSTGRES_DB"="${{ vars.DEV_POSTGRE_SQL_DB_NAME }}", "POSTGRES_PORT"="5432", "POSTGRES_HOST"="${{ secrets.DEV_DB_PUBLIC_IP }}"'

      - name: Populate Variables
        run: |
          scripts/replace-variables.sh -in_file infra/backend.conf.rename_me -out_file infra/batch/backend.conf -variables BUCKET_NAME,OBJECT_PREFIX
          scripts/replace-variables.sh -in_file infra/batch/vars.tfvars.rename_me -out_file infra/batch/pre-vars.tfvars -variables FUNCTION_BUCKET_NAME,REGION,PROJECT_ID,DEPLOYER_SERVICE_ACCOUNT  
          scripts/replace-variables.sh -in_file infra/batch/pre-vars.tfvars -out_file infra/batch/vars.tfvars -variables FUNCTION_ENV_VARIABLE -no_quotes
        env:
          FUNCTION_ENV_VARIABLE: '"BUCKET_NAME"="mobility-datasets", "POSTGRES_USER"="${{ secrets.DEV_POSTGRE_USER_NAME }}", "POSTGRES_PASSWORD"="${{ secrets.DEV_POSTGRE_USER_PASSWORD }}", "POSTGRES_DB"="${{ vars.DEV_POSTGRE_SQL_DB_NAME }}", "POSTGRES_PORT"="5432", "POSTGRES_HOST"="${{ secrets.DEV_DB_PUBLIC_IP }}"'

      - name: Zip source code
        run: |
          cd infra/batch
          zip -r -j datasets.zip datasets/*

      # Clearing previous versions of the source code
      - name: Check for changes in infra/batch/datasets
        id: check_files
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'infra/batch/datasets'; then
            echo "CLEAR_PREVIOUS_VERSION=true" >> $GITHUB_ENV
          else
            echo "CLEAR_PREVIOUS_VERSION=false" >> $GITHUB_ENV
          fi
      - name: Clear Folder in GCP Bucket
        if: env.CLEAR_PREVIOUS_VERSION
        continue-on-error: true # In case the bucket is not yet created
        run: gsutil rm gs://${{env.FUNCTION_BUCKET_NAME}}/datasets/*

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.3
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd infra/batch
          terraform init -backend-config=backend.conf

      - name: Terraform Plan
        run: |
          cd infra/batch
          terraform plan -var-file=vars.tfvars -out=tf.plan
          terraform show -no-color tf.plan > terraform-plan.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Apply
        run: |
          cd infra/batch
          terraform apply -auto-approve tf.plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
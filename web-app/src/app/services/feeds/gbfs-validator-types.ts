/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/validate': {
    /** Validate GBFS feed */
    post: {
      requestBody: components['requestBodies']['ValidateRequestBody'];
      responses: {
        /** @description Validation result */
        200: {
          content: {
            'application/json': components['schemas']['ValidationResult'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BasicAuth: {
      /** @example BasicAuth */
      authType?: string;
      /** @example username */
      username?: string;
      /** @example password */
      password?: string;
    };
    BearerTokenAuth: {
      /** @example bearerToken */
      authType?: string;
      /** @example THE_TOKEN */
      token?: string;
    };
    OAuthClientCredentialsGrantAuth: {
      /** @example OAuthClientCredentialsGrantAuth */
      authType?: string;
      /** @example CLIENT_ID */
      clientId?: string;
      /** @example THE_SECRET */
      clientSecret?: string;
      /** @example https://token.example.com */
      tokenUrl?: string;
    };
    FileError: {
      /** @description Possible known keywords: type, enum, format, required, minimum, maximum, pattern. */
      keyword: string;
      /** @description The JSON Pointer path to the part of the instance that failed validation. */
      instancePath: string;
      /** @description The JSON Pointer path to the part of the schema that triggered the error. */
      schemaPath: string;
      /** @description Human-readable message describing the error. */
      message: string;
    };
    SystemError: {
      /** @description Error code or identifier for the system error. Examples: HTTP_ERROR_404, PARSE_ERROR, CONNECTION_ERROR, FILE_NOT_FOUND. */
      error: string;
      /** @description Human-readable message describing the system error. */
      message: string;
    };
    GbfsFile: {
      /**
       * @description Key identifying the type of feed this is. The key MUST be the base file name defined in the spec for the corresponding feed type ( system_information for system_information.json file, station_information for station_information.json file).
       *
       * @example gbfs
       */
      name?: string;
      /**
       * Format: url
       * @example https://www.example.com/gbfs/v3/gbfs.json
       */
      url?: string;
      /** @example 3.0 */
      version?: string;
      /**
       * @description Only relevant for pre-v3 files
       * @example en
       */
      language?: string | null;
      errors?: Array<components['schemas']['FileError']>;
      schema?: Record<string, never>;
      /** @description System errors that occurred while processing this file, such as fetch failures or parsing errors. These are not validation errors but rather issues that prevented proper validation. */
      systemErrors?: Array<components['schemas']['SystemError']>;
    };
    ValidationResult: {
      summary?: {
        /** @example v1.2 */
        validatorVersion?: string;
        files?: Array<components['schemas']['GbfsFile']>;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    ValidateRequestBody: {
      content: {
        'application/json': {
          /** @example https://example.com/gbfs.json */
          feedUrl: string;
          auth?:
            | components['schemas']['BasicAuth']
            | components['schemas']['BearerTokenAuth']
            | components['schemas']['OAuthClientCredentialsGrantAuth'];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;

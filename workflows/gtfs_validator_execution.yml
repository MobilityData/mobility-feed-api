main:
  params: [event]
  steps:
      - logTriggeringEvent:
          call: sys.log
          args:
              text: ${event}
              severity: INFO
      - extractDataFromEvent:
          assign:
          - data: ${event.data.protoPayload}
          - resource: ${event.data.resource}
      - initVariables:
          assign:
            - datasetsBucket: ${sys.get_env("datasets_bucket_name")}
            - reportsBucket: ${sys.get_env("reports_bucket_name")}
            - validatorEndpoint: ${sys.get_env("validator_endpoint")}
            # Resource name format: projects/_/buckets/<datasetBucketName>/objects/<feedID>/<datasetID>/<datasetID>.zip
            - feedID: ${text.split(data.resourceName, "/")[5]}
            - datasetID: ${text.split(data.resourceName, "/")[6]}
            - region: ${resource.labels.location}
            - projectID: ${resource.labels.project_id}
            - url: ${"https://storage.googleapis.com/" + datasetsBucket + "/" + feedID + "/" + datasetID + "/" + datasetID + ".zip"}
            - headers:
                  Content-Type: application/json
            - jobID: "undefined"
      - assignResultsEndpoint:
          switch:
            - condition: ${sys.get_env("environment") == "prod"}
              next: assignResultsEndpointProd
          next: assignResultsEndpointDev
      - assignResultsEndpointProd:
          assign:
            - resultsEndpoint: "https://gtfs-validator-results.mobilitydata.org/"
      - assignResultsEndpointDev:
          assign:
            - resultsEndpoint: "https://staging-gtfs-validator-results.mobilitydata.org/"
      - logInit:
          call: sys.log
          args:
              text: '${"feedID: " + feedID + ", datasetID: " + datasetID + ", url: " + url}'
              severity: INFO
      - getValidatorVersion:
          steps:
            - httpCall:
                call: http.get
                args:
                  url: ${validatorEndpoint + "/version"}
                result: versionResponse
            - assignValidatorVersion:
                assign:
                    - validatorVersion: ${versionResponse.body.version}
            - logValidatorVersion:
                call: sys.log
                args:
                  text: '${"GTFS Validator version: " + validatorVersion}'
                  severity: INFO
      - createJob:
          call: http.post
          args:
              url: ${validatorEndpoint + "/create-job"}
              headers: ${headers}
              body:
                url: "${url}"
                countryCode: ""
          result: response
      - checkJobCreationStatus:
          switch:
            - condition: ${response.code == 200}
              next: successCreatingJob
          next: errorCreatingJob
      - errorCreatingJob:
          return:
            createJobResponse: response
      - successCreatingJob:
          assign:
              - jobID: ${response.body.jobId}
      - logJobID:
          call: sys.log
          args:
              text: '${"jobID: " + jobID}'
              severity: INFO
      - waitForExecutionResultCreation:
          steps:
            - checkFileExistence:
                try:
                  steps:
                    - getFile:
                        call: googleapis.storage.v1.objects.get
                        args:
                            bucket: ${reportsBucket}
                            object: ${text.url_encode(jobID + "/execution_result.json")}
                            alt: media
                        result: executionResultResponse
                    - validateStatus:
                        next: logExecutionResult
                # Retrying 120 times with a delay of 10 seconds each time gives 20 minutes wait time.
                retry:
                  predicate: ${retry_predicate}
                  max_retries: 120
                  backoff:
                    initial_delay: 10
                    max_delay: 10
                    multiplier: 1
      - logExecutionResult:
          steps:
          - logExecutionResultMessage:
              call: sys.log
              args:
                  text: 'Execution results:'
                  severity: INFO
          - logExecutionResultValue:
              call: sys.log
              args:
                  text: ${executionResultResponse}
                  severity: INFO
      - systemErrors:
            try:
                call: googleapis.storage.v1.objects.copy
                args:
                    destinationBucket: ${datasetsBucket}
                    destinationObject: ${feedID + "%2F" + datasetID + "%2Fsystem_errors_" + validatorVersion + ".json"}
                    sourceBucket: ${reportsBucket}
                    sourceObject: ${jobID + "%2Fsystem_errors.json"}
                    destinationPredefinedAcl: publicRead
            except: # Could fail in case of a validation error, but a validation error doesn't mean it failed to create system_errors.json
                as: e
                steps:
                    - logSystemErrorCopyErrorMessage:
                        call: sys.log
                        args:
                            text: 'An error occurred during copy of system_errors.json'
                            severity: ERROR
                    - logSystemErrorCopyError:
                        call: sys.log
                        args:
                            data: ${e.message}
                            severity: ERROR
      - logSystemErrorsCopied:
          call: sys.log
          args:
            text: ${"system_errors.json copied to " + datasetsBucket + "/" + feedID + "/" + datasetID + "/system_errors_" + validatorVersion + ".json"}
            severity: INFO
      - validateExecutionResult:
          switch:
            - condition: ${map.get(executionResultResponse, "error") != null and executionResultResponse.error == "Validation failed"}
              next: handleExecutionFailure
          next: checkExecutionResultStatus
      - handleExecutionFailure:
          steps:
          - logFailure:
              call: sys.log
              args:
                  text: 'Validation failed and status is error. Aborting execution.'
                  severity: ERROR
          - returnFailure:
              return: "Execution failed due to validation error." # No system_errors.json was generated
      - checkExecutionResultStatus:
          steps:
            - getExecutionStatus:
                assign:
                  - isReportGenerated: ${executionResultResponse.status == "success"}
            - validateExecutionStatus:
                switch:
                  - condition: ${isReportGenerated}
                    next: htmlReport
                next: errorReportGeneration
      - errorReportGeneration:
          steps:
            - logErrorReportGeneration:
                call: sys.log
                args:
                    text: 'Error generating report'
                    severity: ERROR
            - returnErrorReportGeneration:
                return: "Error generating report"
      - htmlReport:
          call: googleapis.storage.v1.objects.copy
          args:
            destinationBucket: ${datasetsBucket}
            destinationObject: ${feedID + "%2F" + datasetID + "%2Freport_" + validatorVersion + ".html"}
            sourceBucket: ${reportsBucket}
            sourceObject: ${jobID + "%2Freport.html"}
            destinationPredefinedAcl: publicRead
      - logHTMLReportCopied:
          call: sys.log
          args:
              text: ${"HTML report copied to " + datasetsBucket + "/" + feedID + "/" + datasetID + "/report_" + validatorVersion + ".html"}
              severity: INFO
      - jsonReport:
          call: googleapis.storage.v1.objects.copy
          args:
            destinationBucket: ${datasetsBucket}
            destinationObject: ${feedID + "%2F" + datasetID + "%2Freport_" + validatorVersion + ".json"}
            sourceBucket: ${reportsBucket}
            sourceObject: ${jobID + "%2Freport.json"}
            destinationPredefinedAcl: publicRead
      - logJSONReportCopied:
          call: sys.log
          args:
              text: ${"JSON report copied to " + datasetsBucket + "/" + feedID + "/" + datasetID + "/report_" + validatorVersion + ".json"}
              severity: INFO
      - updateDatabase:
          call: http.post
          args:
            url: ${"https://" + region + "-" + projectID + ".cloudfunctions.net/process-validation-report"}
            auth:
              type: OIDC
            body:
                feed_id: ${feedID}
                dataset_id: ${datasetID}
                validator_version: ${validatorVersion}
            headers: ${headers}
          result: updateDatabaseResponse
      - logUpdateDatabaseResponse:
          call: sys.log
          args:
              text: ${updateDatabaseResponse}
              severity: INFO
          next: successfulExecution
      - fileExistenceTimeout:
          steps:
            - logFileExistenceTimeout:
                call: sys.log
                args:
                    text: ${"File not found after 20 minutes for datasetID " + datasetID }
                    severity: ERROR
            - returnFileNotFound:
                return:  ${"File not found after 20 minutes for datasetID " + datasetID }
      - successfulExecution:
          steps:
            - logSuccessfulExecution:
                call: sys.log
                args:
                    text: ${"GTFS validator execution completed successfully for datasetID " + datasetID}
                    severity: INFO
            - returnSuccessfulExecution:
                return: ${"GTFS validator execution completed successfully for datasetID " + datasetID}
retry_predicate:
      params: [e]
      steps:
        - log_error_message:
            call: sys.log
            args:
                data: ${e.message}
                severity: "INFO"
        - validateErrorCode:
            switch:
                - condition: ${e.code in [404, 500, 503, 429]}
                  return: true
        - unSupportedError:
            return: false
